name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Build the project with Maven
      - name: Build with Maven
        run: mvn clean package

      # Run unit tests with Maven
      - name: Unit Tests with Maven
        run: mvn test

      # SonarQube Scanner
#      - name: Build and analyze
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=student-payment-project -Dsonar.projectName='student-payment-project'

      # Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 714714593268.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=714714593268.dkr.ecr.us-east-1.amazonaws.com/spring-angular:backend_latest
          docker build -t $IMAGE_TAG .
          echo "::set-output name=image_tag::$IMAGE_TAG"
        id: build-and-push

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ steps.build-and-push.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Print Trivy Action Logs
        if: always() # This step runs only if the previous step fails
        run: cat trivy-results.sarif

      - name: Push Docker Image to ECR
        if: success()
        run: |
          IMAGE_TAG=${{ steps.build-and-push.outputs.image_tag }}
          docker push $IMAGE_TAG
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Optional: Clean up Docker images
      - name: Clean up Docker images
        if: always()
        run: docker rmi ${{ steps.build-and-push.outputs.image_tag }}

      # Trigger the deploy workflow
      - name: Trigger Deploy Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT }}
          repository: hamzabourass/Angular-Spring
          event-type: deploy
          client-payload: '{"image_tag": "${{ steps.build-and-push.outputs.image_tag }}", "environment": "staging"}'
